
/* File: C:\Users\coop\Desktop\company_management\client\src\App.css */
/* Reset and General Styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Arial', sans-serif;
  background-color: #F8F9FA; /* Light Gray Background */
  color: #212529; /* Primary Text */
  font-size: 16px; /* Base font size */
}

/* Container */
.container {
  padding: 15px;
  max-width: 100%; /* Full width on mobile */
  margin: 0 auto;
}

/* Dashboard Header */
.dashboard-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
  background-color: #007BFF; /* Primary Blue */
  padding: 10px 15px;
  border-radius: 8px;
  color: #FFFFFF; /* White Text */
}

.dashboard-title {
  font-size: 1.5rem; /* Smaller on mobile */
  margin: 0;
}

/* Alerts */
.alert-success {
  background-color: #D4EDDA;
  color: #155724;
  border-color: #C3E6CB;
}

.alert-danger {
  background-color: #F8D7DA;
  color: #721C24;
  border-color: #F5C6CB;
}

.alert-warning {
  background-color: #FFF3CD;
  color: #856404;
  border-color: #FFEEBA;
}

/* Tables */
.company-table, .pending-requests-table {
  width: 100%;
  margin-top: 1rem;
  border-collapse: collapse;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  background-color: #FFFFFF;
  min-width: 600px; /* Ensures horizontal scroll on small screens */
}

/* Responsive Table Wrapper */
.table-responsive {
  overflow-x: auto;
  -webkit-overflow-scrolling: touch;
}

.company-table th,
.pending-requests-table th {
  background-color: #007BFF;
  color: #FFFFFF;
  padding: 10px;
  text-align: left;
  font-weight: 600;
}

.company-table td,
.pending-requests-table td {
  padding: 10px;
  border-top: 1px solid #DEE2E6;
}

.company-table tr:nth-child(even),
.pending-requests-table tr:nth-child(even) {
  background-color: #F8F9FA;
}

.company-table tr:hover,
.pending-requests-table tr:hover {
  background-color: #E9ECEF;
}

/* Buttons */
.btn-primary {
  background-color: #007BFF;
  border-color: #007BFF;
  color: #FFFFFF;
}

.btn-primary:hover {
  background-color: #0056B3;
  border-color: #0056B3;
}

.btn-success {
  background-color: #28A745;
  border-color: #28A745;
  color: #FFFFFF;
}

.btn-success:hover {
  background-color: #218838;
  border-color: #218838;
}

.btn-warning {
  background-color: #FFC107;
  border-color: #FFC107;
  color: #212529;
}

.btn-warning:hover {
  background-color: #E0A800;
  border-color: #E0A800;
}

.btn-danger {
  background-color: #DC3545;
  border-color: #DC3545;
  color: #FFFFFF;
}

.btn-danger:hover {
  background-color: #C82333;
  border-color: #C82333;
}

.btn-secondary {
  background-color: #6C757D;
  border-color: #6C757D;
  color: #FFFFFF;
}

.btn-secondary:hover {
  background-color: #5A6268;
  border-color: #5A6268;
}

.btn-info {
  background-color: #17A2B8;
  border-color: #17A2B8;
  color: #FFFFFF;
}

.btn-info:hover {
  background-color: #138496;
  border-color: #138496;
}

.btn-action {
  margin-right: 8px;
  padding: 6px 12px;
}

.btn-create {
  padding: 8px 16px;
}

/* Status Badges */
.status-active {
  background-color: #28A745;
  color: #FFFFFF;
  padding: 4px 8px;
  border-radius: 12px;
}

.status-inactive {
  background-color: #DC3545;
  color: #FFFFFF;
}

.status-pending {
  background-color: #FFC107;
  color: #212529;
}

/* Forms and Modals */
.modal-form .modal-content {
  background-color: #FFFFFF;
  border-radius: 8px;
}

.form-group {
  margin-bottom: 1rem;
}

.form-label {
  display: block;
  margin-bottom: 0.5rem;
  color: #212529;
  font-weight: 500;
}

.form-control {
  width: 100%;
  padding: 8px;
  border: 1px solid #DEE2E6;
  border-radius: 4px;
  color: #212529;
}

.form-control:focus {
  border-color: #007BFF;
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

.form-control::placeholder {
  color: #6C757D;
}

/* Payroll Rules Section */
.payroll-rules-card {
  border: 1px solid #DEE2E6;
  border-radius: 8px;
  padding: 16px;
  background-color: #FFFFFF;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  margin-top: 1.5rem;
}

.payroll-rules-card h5 {
  color: #212529;
  margin-bottom: 1rem;
}

.payroll-rules-card table {
  width: 100%;
  border-collapse: collapse;
}

.payroll-rules-card th,
.payroll-rules-card td {
  padding: 8px;
  border: 1px solid #DEE2E6;
}

/* Navigation Tabs */
.nav-tabs .nav-link {
  color: #007BFF;
}

.nav-tabs .nav-link.active {
  background-color: #007BFF;
  color: #FFFFFF;
  border-color: #007BFF;
}

.nav-tabs .nav-link:hover {
  border-color: #007BFF;
}

/* Mobile Responsiveness */
@media (max-width: 768px) {
  body {
    font-size: 14px; /* Smaller text on mobile */
  }

  .dashboard-header {
    flex-direction: column;
    align-items: flex-start;
    padding: 10px;
  }

  .dashboard-title {
    font-size: 1.2rem;
    margin-bottom: 10px;
  }

  .d-flex {
    flex-direction: column;
    align-items: stretch !important;
  }

  .btn {
    margin: 5px 0;
    width: 100%;
    text-align: center;
  }

  .form-control {
    width: 100% !important;
    margin-bottom: 10px;
  }

  .nav-tabs {
    flex-direction: column;
  }

  .nav-item {
    width: 100%;
  }

  .nav-link {
    text-align: left;
    padding: 8px;
  }

  .modal-dialog {
    margin: 1rem;
    max-width: 100%;
  }

  .btn-action {
    margin-bottom: 5px;
    width: 100%;
  }
}

/* File: C:\Users\coop\Desktop\company_management\client\src\App.js */
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import 'bootstrap/dist/css/bootstrap.min.css';
import './App.css';
import Navbar from './components/Navbar';
import Home from './pages/Home';
import Login from './components/Login';
import SuperAdminDashboard from './components/SuperAdminDashboard';
import CompanyAdminDashboard from './components/CompanyAdminDashboard';
import WorkerManagerDashboard from './components/WorkerManagerDashboard';

function App() {
  return (
    <Router>
      <div>
        <Navbar />
        <Routes>
          <Route path="/" element={<Home />} /> {/* Fixed from <excludeHome /> */}
          <Route path="/login" element={<Login />} />
          <Route path="/super-admin" element={<SuperAdminDashboard />} />
          <Route path="/company-admin" element={<CompanyAdminDashboard />} />
          <Route path="/worker-manager" element={<WorkerManagerDashboard />} />
        </Routes>
      </div>
    </Router>
  );
}

export default App;

/* File: C:\Users\coop\Desktop\company_management\client\src\App.test.js */
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


/* File: C:\Users\coop\Desktop\company_management\client\src\components\CompanyAdminDashboard.js */
import { useState, useEffect, useCallback } from 'react';
import { Table, Button, Form, Modal, Nav, Badge, Alert } from 'react-bootstrap';
import axios from 'axios';
import * as XLSX from 'xlsx';
import { useNavigate } from 'react-router-dom';

const CompanyAdminDashboard = () => {
  const [activeTab, setActiveTab] = useState('workers');
  const [workers, setWorkers] = useState([]);
  const [filteredWorkers, setFilteredWorkers] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [payrollSearchQuery, setPayrollSearchQuery] = useState('');
  const [filteredPayrollData, setFilteredPayrollData] = useState([]);
  const [showWorkerModal, setShowWorkerModal] = useState(false);
  const [newWorker, setNewWorker] = useState({ name: '', photo: null, bankName: '', accountNumber: '', regdate: '' });
  const [photoPreview, setPhotoPreview] = useState(null);
  const [payrollRules, setPayrollRules] = useState({ standard_working_hours: 8, daily_rate: 0, overtime_rate: 0 });
  const [showPayrollRulesModal, setShowPayrollRulesModal] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [pendingRequests, setPendingRequests] = useState([]);
  const [showManagerModal, setShowManagerModal] = useState(false);
  const [newManager, setNewManager] = useState({ username: '', password: '' });
  const [workerManagers, setWorkerManagers] = useState([]);
  const [showOvertimeModal, setShowOvertimeModal] = useState(false);
  const [overtimeData, setOvertimeData] = useState({ workerId: '', hours: '', allWorkers: false, deduct: false });
  const [showPhotoModal, setShowPhotoModal] = useState(false);
  const [selectedPhoto, setSelectedPhoto] = useState(null);
  const [payrollData, setPayrollData] = useState([]);
  const [payrollPeriod, setPayrollPeriod] = useState({ startDate: '', endDate: '' });
  const [isLoggedIn, setIsLoggedIn] = useState(!!localStorage.getItem('role')); // Check login state
  const navigate = useNavigate();
  const dailyRate = payrollRules?.daily_rate ?? 0;
  const formattedDailyRate = dailyRate.toFixed(2);

  // Use useCallback to memoize fetchPayroll
  const fetchPayroll = useCallback(async () => {
    try {
      const response = await axios.get('http://localhost:3001/api/workers/payroll', {
        withCredentials: true,
        params: { startDate: payrollPeriod.startDate, endDate: payrollPeriod.endDate },
      });
      setPayrollData(response.data);
      setFilteredPayrollData(response.data);
    } catch (err) {
      setError('Failed to fetch payroll data');
    }
  }, [payrollPeriod.startDate, payrollPeriod.endDate]);

  useEffect(() => {
    if (!isLoggedIn) navigate('/login');
    if (success) {
      const timer = setTimeout(() => setSuccess(''), 3000);
      return () => clearTimeout(timer);
    }
  }, [success, isLoggedIn, navigate]);

  useEffect(() => {
    if (searchQuery.trim() === '') {
      setFilteredWorkers(workers);
    } else {
      const filtered = workers.filter((worker) =>
        worker.name.toLowerCase().includes(searchQuery.toLowerCase())
      );
      setFilteredWorkers(filtered);
    }
  }, [searchQuery, workers]);

  useEffect(() => {
    if (payrollSearchQuery.trim() === '') {
      setFilteredPayrollData(payrollData);
    } else {
      const filtered = payrollData.filter((entry) =>
        entry.name.toLowerCase().includes(payrollSearchQuery.toLowerCase())
      );
      setFilteredPayrollData(filtered);
    }
  }, [payrollSearchQuery, payrollData]);

  useEffect(() => {
    if (isLoggedIn) {
      fetchWorkers();
      fetchPayrollRules();
      fetchPendingRequests();
      fetchWorkerManagers();
      if (payrollPeriod.startDate && payrollPeriod.endDate) fetchPayroll();
    }
  }, [payrollPeriod, isLoggedIn, fetchPayroll]); // Include fetchPayroll in the dependency array

  const fetchWorkers = async () => {
    try {
      const response = await axios.get('http://localhost:3001/api/workers', { withCredentials: true });
      setWorkers(response.data);
      setFilteredWorkers(response.data);
    } catch (err) {
      setError('Failed to fetch workers');
    }
  };

  const fetchPayrollRules = async () => {
    try {
      const response = await axios.get('http://localhost:3001/api/payroll-rules', { withCredentials: true });
      setPayrollRules({
        standard_working_hours: response.data.standard_working_hours || 8,
        daily_rate: Number(response.data.daily_rate) || 0,
        overtime_rate: Number(response.data.overtime_rate) || 0,
      });
    } catch (err) {
      setError('Failed to fetch payroll rules');
    }
  };

  const fetchPendingRequests = async () => {
    try {
      const response = await axios.get('http://localhost:3001/api/pending-requests', { withCredentials: true });
      setPendingRequests(response.data);
    } catch (err) {
      setError('Failed to fetch pending requests');
    }
  };

  const fetchWorkerManagers = async () => {
    try {
      const response = await axios.get('http://localhost:3001/api/worker-managers', { withCredentials: true });
      setWorkerManagers(response.data);
    } catch (err) {
      setError('Failed to fetch worker managers');
    }
  };
  const handleCreateWorker = async (e) => {
    e.preventDefault();
    try {
        const formData = new FormData();
        formData.append('name', newWorker.name);
        formData.append('photo', newWorker.photo);
        formData.append('bankName', newWorker.bankName);
        formData.append('accountNumber', newWorker.accountNumber);

        await axios.post('http://localhost:3001/api/workers', formData, { withCredentials: true });
        setShowWorkerModal(false);
        setNewWorker({ name: '', photo: null, bankName: '', accountNumber: '' });
        setPhotoPreview(null);
        fetchWorkers();
        setSuccess('Worker created successfully');
    } catch (err) {
        setError(err.response?.data?.error || 'Failed to create worker');
        console.error('Worker creation error:', err.response?.data || err);
    }
  };

  const handleUpdatePayrollRules = async (e) => {
    e.preventDefault();
    try {
      const payload = {
        standard_working_hours: Number(payrollRules.standard_working_hours),
        daily_rate: Number(payrollRules.daily_rate),
        overtime_rate: Number(payrollRules.overtime_rate),
      };
      await axios.post('http://localhost:3001/api/payroll-rules', payload, { withCredentials: true });
      setShowPayrollRulesModal(false);
      setSuccess('Payroll rules updated successfully');
      fetchPayrollRules();
    } catch (err) {
      setError(err.response?.data?.error || 'Failed to update payroll rules');
      console.error('Payroll rules update error:', err.response?.data || err);
    }
  };

  const handleApproveRequest = async (requestId, approve) => {
    try {
      await axios.post(
        `http://localhost:3001/api/pending-requests/${requestId}`,
        { action: approve ? 'approve' : 'reject' },
        { withCredentials: true }
      );
      fetchPendingRequests();
      fetchWorkers();
      setSuccess(`Request ${approve ? 'approved' : 'rejected'} successfully`);
    } catch (err) {
      setError('Failed to process request');
    }
  };

  const handleApproveAll = async () => {
    try {
        await axios.post('http://localhost:3001/api/pending-requests/approve-all', {}, { withCredentials: true });
        setSuccess('All requests approved successfully');
        fetchPendingRequests();
        fetchWorkers();
    } catch (err) {
        setError(err.response?.data?.message || 'Failed to approve all requests');
    }
  };

  const handleCreateManager = async (e) => {
    e.preventDefault();
    try {
      await axios.post('http://localhost:3001/api/worker-managers', { ...newManager, role: 'worker_manager' }, { withCredentials: true });
      setShowManagerModal(false);
      setNewManager({ username: '', password: '' });
      setSuccess('Worker manager created successfully');
      fetchWorkerManagers();
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to create manager');
    }
  };

  const handleUpdateManagerStatus = async (managerId, status) => {
    try {
      await axios.patch(`http://localhost:3001/api/worker-managers/${managerId}/status`, { status }, { withCredentials: true });
      setSuccess(`Worker Manager ${status} successfully`);
      fetchWorkerManagers();
    } catch (err) {
      setError('Failed to update Worker Manager status');
    }
  };

  const handleApplyOvertime = async (e, deduct = false) => {
    e.preventDefault();
    try {
      const payload = overtimeData.allWorkers
        ? { hours: parseFloat(overtimeData.hours), allWorkers: true, deduct }
        : { workerId: overtimeData.workerId, hours: parseFloat(overtimeData.hours), deduct };

      await axios.post('http://localhost:3001/api/workers/overtime', payload, { withCredentials: true });
      setShowOvertimeModal(false);
      setOvertimeData({ workerId: '', hours: '', allWorkers: false, deduct: false });
      fetchWorkers();
      setSuccess(`${deduct ? 'Overtime deducted' : 'Overtime applied'} successfully`);
    } catch (err) {
      setError(err.response?.data?.message || `Failed to ${deduct ? 'deduct' : 'apply'} overtime`);
    }
  };

  const handleToggleWorkerStatus = async (workerId, currentStatus) => {
    try {
      const newStatus = currentStatus === 'active' ? 'inactive' : 'active';
      await axios.patch(`http://localhost:3001/api/workers/${workerId}/status`, { status: newStatus }, { withCredentials: true });
      setSuccess(`Worker ${newStatus} successfully`);
      fetchWorkers();
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to update worker status');
    }
  };

  const handleDeleteWorker = async (workerId) => {
    if (window.confirm('Are you sure you want to delete this worker?')) {
      try {
        await axios.delete(`http://localhost:3001/api/workers/${workerId}`, { withCredentials: true });
        setSuccess('Worker deleted successfully');
        fetchWorkers();
      } catch (err) {
        setError(err.response?.data?.message || 'Failed to delete worker');
      }
    }
  };

  const exportWorkersToExcel = () => {
    if (!payrollRules) {
      alert('Payroll rules not loaded yet.');
      return;
    }
    const data = filteredWorkers.map((worker) => ({
      ID: worker.id,
      Name: worker.name,
      'Daily Rate': payrollRules.daily_rate.toFixed(2),
      'Overtime Rate': payrollRules.overtime_rate.toFixed(2),
      'Overtime Hours': worker.overtime_hours || 0,
      Status: worker.status,
      'Bank Name': worker.bankName || 'N/A',
      'Account Number': worker.accountNumber || 'N/A',
    }));
    const ws = XLSX.utils.json_to_sheet(data);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Workers');
    XLSX.writeFile(wb, 'Worker_Payroll_Data.xlsx');
  };

  const exportPayrollToExcel = () => {
    const data = filteredPayrollData.map((entry) => ({
      ID: entry.workerId,
      Name: entry.name,
      'Days Worked': entry.daysWorked,
      'Regular Hours': entry.regularHours,
      'Overtime Hours': entry.overtimeHours,
      'Daily Pay (Br)': entry.dailyPay.toFixed(2),
      'Overtime Pay (Br)': entry.overtimePay.toFixed(2),
      'Total Salary (Br)': entry.totalSalary.toFixed(2),
      'Bank Name': entry.bankName || 'N/A',
      'Account Number': entry.accountNumber || 'N/A',
    }));
    const ws = XLSX.utils.json_to_sheet(data);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Payroll');
    XLSX.writeFile(wb, `Payroll_${payrollPeriod.startDate}_to_${payrollPeriod.endDate}.xlsx`);
  };

  const handleLogout = async () => {
    try {
      await axios.post('http://localhost:3001/api/auth/logout', {}, { withCredentials: true });
      localStorage.clear();
      setIsLoggedIn(false);
      navigate('/login');
    } catch (err) {
      console.error('Logout error:', err);
      localStorage.clear();
      setIsLoggedIn(false);
      navigate('/login');
    }
  };

  const handleViewPhoto = (photoUrl) => {
    if (!photoUrl) {
      setError('No photo available for this worker');
      return;
    }
    const fullUrl = photoUrl.startsWith('http') ? photoUrl : `http://localhost:3001${photoUrl}`;
    setSelectedPhoto(fullUrl);
    setShowPhotoModal(true);
  };

  if (!isLoggedIn) return null;

  return (
    <div className="container mt-4">
      <div className="dashboard-header d-flex justify-content-between align-items-center mb-3 flex-md-row flex-column">
        <h2 className="dashboard-title">Company Admin Dashboard</h2>
        {isLoggedIn && (
          <Button variant="secondary" onClick={handleLogout}>Logout</Button>
        )}
      </div>

      {error && <Alert variant="danger">{error}</Alert>}
      {success && <Alert variant="success">{success}</Alert>}

      <div className="d-flex justify-content-between align-items-center mb-3 flex-md-row flex-column">
        <Nav variant="tabs" className="flex-md-row flex-column">
          <Nav.Item><Nav.Link eventKey="workers" active={activeTab === 'workers'} onClick={() => setActiveTab('workers')}>Workers</Nav.Link></Nav.Item>
          <Nav.Item>
            <Nav.Link eventKey="pending-requests" active={activeTab === 'pending-requests'} onClick={() => setActiveTab('pending-requests')}>
              Pending Requests
              {pendingRequests.filter((r) => r.status === 'pending').length > 0 && (
                <Badge bg="warning" className="ms-2">{pendingRequests.filter((r) => r.status === 'pending').length}</Badge>
              )}
            </Nav.Link>
          </Nav.Item>
          <Nav.Item><Nav.Link eventKey="payroll" active={activeTab === 'payroll'} onClick={() => setActiveTab('payroll')}>Payroll Management</Nav.Link></Nav.Item>
          <Nav.Item><Nav.Link eventKey="worker-managers" active={activeTab === 'worker-managers'} onClick={() => setActiveTab('worker-managers')}>Worker Managers</Nav.Link></Nav.Item>
          <Nav.Item><Nav.Link eventKey="payroll-calc" active={activeTab === 'payroll-calc'} onClick={() => setActiveTab('payroll-calc')}>Payroll Calculation</Nav.Link></Nav.Item>
        </Nav>
        <Button variant="primary" onClick={() => setShowManagerModal(true)} className="mt-2 mt-md-0">Add Worker Manager</Button>
      </div>

      {activeTab === 'workers' && (
        <>
          <div className="d-flex justify-content-between align-items-center mb-3 flex-md-row flex-column">
            <h3>Manage Workers</h3>
            <div className="d-flex flex-md-row flex-column align-items-md-center">
              <Form.Control
                type="text"
                placeholder="Search workers by name..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="me-md-2 mb-2 mb-md-0"
                style={{ width: '200px' }}
              />
              <Button variant="primary" onClick={() => setShowWorkerModal(true)} className="me-md-2 mb-2 mb-md-0">Add New Worker</Button>
              <Button variant="info" onClick={() => setShowOvertimeModal(true)} className="me-md-2 mb-2 mb-md-0">Apply Overtime</Button>
              <Button variant="success" onClick={exportWorkersToExcel}>Export to Excel</Button>
            </div>
          </div>
          <div className="table-responsive">
          <Table striped bordered hover className="company-table">
            <thead>
              <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Bank Name</th>
                <th>Account Number</th>
                <th>Registration Date</th>
                <th>Daily Rate</th>
                <th>Overtime Rate</th>
                <th>Overtime Hours</th>
                <th>Status</th>
                <th>Photo</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {filteredWorkers.map((worker) => (
                <tr key={worker.id}>
                  <td>{worker.id}</td>
                  <td>{worker.name}</td>
                  <td>{worker.bankName || 'N/A'}</td>
                  <td>{worker.accountNumber || 'N/A'}</td>
                  <td>{worker.regDate ? new Date(worker.regDate).toLocaleDateString() : 'N/A'}</td>
                  <td>{(payrollRules?.daily_rate ?? 0).toFixed(2)} Br</td>
                  <td>{payrollRules.overtime_rate.toFixed(2)} Br</td>
                  <td>{worker.overtime_hours || 0}</td>
                  <td>
                    <Badge className={worker.status === 'active' ? 'status-active' : 'status-inactive'}>
                      {worker.status}
                    </Badge>
                  </td>
                  <td>
                    <Button
                      variant="info"
                      size="sm"
                      onClick={() => handleViewPhoto(worker.photo_url)}
                      disabled={!worker.photo_url}
                    >
                      View Photo
                    </Button>
                  </td>
                  <td>
                    <Button
                      variant={worker.status === 'active' ? 'warning' : 'success'}
                      onClick={() => handleToggleWorkerStatus(worker.id, worker.status)}
                      className="btn-action"
                    >
                      {worker.status === 'active' ? 'Deactivate' : 'Activate'}
                    </Button>
                    <Button
                      variant="danger"
                      onClick={() => handleDeleteWorker(worker.id)}
                      className="btn-action ms-md-2"
                    >
                      Delete
                    </Button>
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>
          </div>
        </>
      )}

      {activeTab === 'pending-requests' && (
        <>
          <h3>Pending Requests</h3>
          <Button variant="success" onClick={handleApproveAll} className="mb-3">Approve All</Button>
          <div className="table-responsive">
            <Table striped bordered hover className="pending-requests-table">
              <thead>
                <tr>
                  <th>Type</th>
                  <th>Details</th>
                  <th>Status</th>
                  <th>Created By</th>
                  <th>Date</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {pendingRequests.map((request) => (
                  <tr key={request.id}>
                    <td>{request.request_type}</td>
                    <td>
                      {request.request_type === 'new_worker' && <>Worker: {request.request_data.name}</>}
                      {request.request_type === 'overtime_individual' && (
                        <>Worker ID: {request.request_data.workerId}, Hours: {request.request_data.hours}{request.request_data.deduct ? ' (Deduct)' : ''}</>
                      )}
                      {request.request_type === 'overtime_group' && (
                        <>Hours: {request.request_data.hours} (All Workers){request.request_data.deduct ? ' (Deduct)' : ''}</>
                      )}
                    </td>
                    <td>
                      <Badge className={`status-${request.status}`}>{request.status}</Badge>
                    </td>
                    <td>{request.created_by_username || 'Unknown'}</td>
                    <td>{new Date(request.created_at).toLocaleDateString()}</td>
                    <td>
                      {request.status === 'pending' && (
                        <>
                          <Button
                            variant="success"
                            onClick={() => handleApproveRequest(request.id, true)}
                            className="btn-action"
                          >
                            Approve
                          </Button>
                          <Button
                            variant="danger"
                            onClick={() => handleApproveRequest(request.id, false)}
                            className="btn-action ms-md-2"
                          >
                            Reject
                          </Button>
                        </>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </Table>
          </div>
        </>
      )}

      {activeTab === 'payroll' && (
        <>
          <h3>Payroll Management</h3>
          <Button variant="primary" onClick={() => setShowPayrollRulesModal(true)} className="mb-3">Update Payroll Rules</Button>
          <div className="payroll-rules-card">
            <h5>Current Payroll Rules</h5>
            <Table bordered>
              <tbody>
                <tr><th>Standard Working Hours/Day</th><td>{payrollRules.standard_working_hours} hours</td></tr>
                <tr><th>Daily Rate</th><td>{(payrollRules?.daily_rate ?? 0).toFixed(2)} Br</td></tr>
                <tr><th>Overtime Rate (per hour)</th><td>{payrollRules.overtime_rate.toFixed(2)} Br</td></tr>
              </tbody>
            </Table>
          </div>
        </>
      )}

      {activeTab === 'worker-managers' && (
        <>
          <h3>Worker Managers</h3>
          <div className="table-responsive">
            <Table striped bordered hover className="company-table">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Username</th>
                  <th>Status</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {workerManagers.map((manager) => (
                  <tr key={manager.id}>
                    <td>{manager.id}</td>
                    <td>{manager.username}</td>
                    <td>
                      <Badge className={manager.status === 'active' ? 'status-active' : 'status-inactive'}>
                        {manager.status}
                      </Badge>
                    </td>
                    <td>
                      <Button
                        variant={manager.status === 'active' ? 'warning' : 'success'}
                        onClick={() => handleUpdateManagerStatus(manager.id, manager.status === 'active' ? 'inactive' : 'active')}
                        className="btn-action"
                      >
                        {manager.status === 'active' ? 'Deactivate' : 'Activate'}
                      </Button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </Table>
          </div>
        </>
      )}

      {activeTab === 'payroll-calc' && (
        <>
          <h3>Payroll Calculation</h3>
          <Form className="mb-3">
            <Form.Group className="d-flex align-items-center flex-md-row flex-column">
              <Form.Label className="me-md-2 mb-2 mb-md-0">Start Date:</Form.Label>
              <Form.Control
                type="date"
                value={payrollPeriod.startDate}
                onChange={(e) => setPayrollPeriod({ ...payrollPeriod, startDate: e.target.value })}
                className="me-md-3 mb-2 mb-md-0"
              />
              <Form.Label className="me-md-2 mb-2 mb-md-0">End Date:</Form.Label>
              <Form.Control
                type="date"
                value={payrollPeriod.endDate}
                onChange={(e) => setPayrollPeriod({ ...payrollPeriod, endDate: e.target.value })}
              />
            </Form.Group>
          </Form>
          <div className="d-flex justify-content-between align-items-center mb-3 flex-md-row flex-column">
            <Form.Control
              type="text"
              placeholder="Search payroll by name..."
              value={payrollSearchQuery}
              onChange={(e) => setPayrollSearchQuery(e.target.value)}
              style={{ width: '200px' }}
              className="mb-2 mb-md-0"
            />
            <Button
              variant="success"
              onClick={exportPayrollToExcel}
              disabled={filteredPayrollData.length === 0}
            >
              Export to Excel
            </Button>
          </div>
          {payrollData.length > 0 ? (
            <div className="table-responsive">
              <Table striped bordered hover className="company-table">
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Bank Name</th>
                    <th>Account Number</th>
                    <th>Registration Date</th>
                    <th>Daily Rate</th>
                    <th>Overtime Rate</th>
                    <th>Overtime Hours</th>
                    <th>Status</th>
                    <th>Photo</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredWorkers.map((worker) => (
                    <tr key={worker.id}>
                      <td>{worker.id}</td>
                      <td>{worker.name}</td>
                      <td>{worker.bankname || 'N/A'}</td> {/* Add bankname */}
                      <td>{worker.accountnumber || 'N/A'}</td> {/* Add accountnumber */}
                      <td>{worker.regdate ? new Date(worker.regdate).toLocaleDateString() : 'N/A'}</td> {/* Add regdate */}
                      <td>{(payrollRules?.daily_rate ?? 0).toFixed(2)} Br</td>
                      <td>{payrollRules.overtime_rate.toFixed(2)} Br</td>
                      <td>{worker.overtime_hours || 0}</td>
                      <td>
                        <Badge className={worker.status === 'active' ? 'status-active' : 'status-inactive'}>
                          {worker.status}
                        </Badge>
                      </td>
                      <td>
                        <Button
                          variant="info"
                          size="sm"
                          onClick={() => handleViewPhoto(worker.photo_url)}
                          disabled={!worker.photo_url}
                        >
                          View Photo
                        </Button>
                      </td>
                      <td>
                        <Button
                          variant={worker.status === 'active' ? 'warning' : 'success'}
                          onClick={() => handleToggleWorkerStatus(worker.id, worker.status)}
                          className="btn-action"
                        >
                          {worker.status === 'active' ? 'Deactivate' : 'Activate'}
                        </Button>
                        <Button
                          variant="danger"
                          onClick={() => handleDeleteWorker(worker.id)}
                          className="btn-action ms-md-2"
                        >
                          Delete
                        </Button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </Table>
            </div>
          ) : (
            <p>Select a date range to calculate payroll.</p>
          )}
        </>
      )}

      <Modal show={showWorkerModal} onHide={() => setShowWorkerModal(false)} dialogClassName="modal-form">
          <Modal.Header closeButton>
              <Modal.Title>Add New Worker</Modal.Title>
          </Modal.Header>
          <Modal.Body>
              <Form onSubmit={handleCreateWorker}>
                  <Form.Group className="form-group">
                      <Form.Label className="form-label">Photo</Form.Label>
                      <div className="mb-2">
                          {photoPreview && <img src={photoPreview} alt="Preview" style={{ width: '100px', height: '100px', objectFit: 'cover' }} />}
                      </div>
                      <Form.Control
                          type="file"
                          accept="image/*"
                          onChange={(e) => {
                              const file = e.target.files[0];
                              setNewWorker({ ...newWorker, photo: file });
                              setPhotoPreview(URL.createObjectURL(file));
                          }}
                          className="form-control"
                      />
                  </Form.Group>
                  <Form.Group className="form-group">
                      <Form.Label className="form-label">Name</Form.Label>
                      <Form.Control
                          type="text"
                          value={newWorker.name}
                          onChange={(e) => setNewWorker({ ...newWorker, name: e.target.value })}
                          required
                          className="form-control"
                      />
                  </Form.Group>
                  <Form.Group className="form-group">
                      <Form.Label className="form-label">Bank Name</Form.Label>
                      <Form.Control
                          type="text"
                          value={newWorker.bankName}
                          onChange={(e) => setNewWorker({ ...newWorker, bankName: e.target.value })}
                          required
                          className="form-control"
                      />
                  </Form.Group>
                  <Form.Group className="form-group">
                      <Form.Label className="form-label">Account Number</Form.Label>
                      <Form.Control
                          type="text"
                          value={newWorker.accountNumber}
                          onChange={(e) => setNewWorker({ ...newWorker, accountNumber: e.target.value })}
                          required
                          className="form-control"
                      />
                  </Form.Group>
                  <Button variant="primary" type="submit" className="btn-create">Create Worker</Button>
              </Form>
          </Modal.Body>
      </Modal>

      <Modal show={showPayrollRulesModal} onHide={() => setShowPayrollRulesModal(false)} dialogClassName="modal-form">
        <Modal.Header closeButton>
          <Modal.Title>Update Payroll Rules</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form onSubmit={handleUpdatePayrollRules}>
            <Form.Group className="form-group">
              <Form.Label className="form-label">Standard Working Hours/Day</Form.Label>
              <Form.Control
                type="number"
                value={payrollRules.standard_working_hours}
                onChange={(e) => setPayrollRules({ ...payrollRules, standard_working_hours: e.target.value })}
                required
                className="form-control"
              />
            </Form.Group>
            <Form.Group className="form-group">
              <Form.Label className="form-label">Daily Rate (Br)</Form.Label>
              <Form.Control
                type="number"
                step="0.01"
                value={payrollRules.daily_rate}
                onChange={(e) => setPayrollRules({ ...payrollRules, daily_rate: e.target.value })}
                required
                className="form-control"
              />
            </Form.Group>
            <Form.Group className="form-group">
              <Form.Label className="form-label">Overtime Rate (Br/hour)</Form.Label>
              <Form.Control
                type="number"
                step="0.01"
                value={payrollRules.overtime_rate}
                onChange={(e) => setPayrollRules({ ...payrollRules, overtime_rate: e.target.value })}
                required
                className="form-control"
              />
            </Form.Group>
            <Button variant="primary" type="submit" className="btn-create">Update Rules</Button>
          </Form>
        </Modal.Body>
      </Modal>

      <Modal show={showManagerModal} onHide={() => setShowManagerModal(false)} dialogClassName="modal-form">
        <Modal.Header closeButton>
          <Modal.Title>Add Worker Manager</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form onSubmit={handleCreateManager}>
            <Form.Group className="form-group">
              <Form.Label className="form-label">Username</Form.Label>
              <Form.Control
                type="text"
                value={newManager.username}
                onChange={(e) => setNewManager({ ...newManager, username: e.target.value })}
                required
                className="form-control"
              />
            </Form.Group>
            <Form.Group className="form-group">
              <Form.Label className="form-label">Password</Form.Label>
              <Form.Control
                type="password"
                value={newManager.password}
                onChange={(e) => setNewManager({ ...newManager, password: e.target.value })}
                required
                className="form-control"
              />
            </Form.Group>
            <Button variant="primary" type="submit" className="btn-create">Create Manager</Button>
          </Form>
        </Modal.Body>
      </Modal>

      <Modal show={showOvertimeModal} onHide={() => setShowOvertimeModal(false)} dialogClassName="modal-form">
        <Modal.Header closeButton>
          <Modal.Title>Apply Overtime</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form onSubmit={(e) => handleApplyOvertime(e, overtimeData.deduct)}>
            <Form.Group className="form-group">
              <Form.Check
                type="checkbox"
                label="Apply to all workers"
                checked={overtimeData.allWorkers}
                onChange={(e) => setOvertimeData({ ...overtimeData, allWorkers: e.target.checked })}
              />
            </Form.Group>
            {!overtimeData.allWorkers && (
              <Form.Group className="form-group">
                <Form.Label className="form-label">Worker</Form.Label>
                <Form.Select
                  value={overtimeData.workerId}
                  onChange={(e) => setOvertimeData({ ...overtimeData, workerId: e.target.value })}
                  required
                  className="form-control"
                >
                  <option value="">Select worker</option>
                  {workers.map((worker) => (
                    <option key={worker.id} value={worker.id}>{worker.name}</option>
                  ))}
                </Form.Select>
              </Form.Group>
            )}
            <Form.Group className="form-group">
              <Form.Label className="form-label">Hours</Form.Label>
              <Form.Control
                type="number"
                step="0.5"
                value={overtimeData.hours}
                onChange={(e) => setOvertimeData({ ...overtimeData, hours: e.target.value })}
                required
                className="form-control"
              />
            </Form.Group>
            <Form.Group className="form-group">
              <Form.Check
                type="checkbox"
                label="Deduct Overtime"
                checked={overtimeData.deduct}
                onChange={(e) => setOvertimeData({ ...overtimeData, deduct: e.target.checked })}
              />
            </Form.Group>
            <Button variant="primary" type="submit" className="btn-create">
              {overtimeData.deduct ? 'Deduct Overtime' : 'Apply Overtime'}
            </Button>
          </Form>
        </Modal.Body>
      </Modal>

      <Modal show={showPhotoModal} onHide={() => setShowPhotoModal(false)} dialogClassName="modal-form">
        <Modal.Header closeButton>
          <Modal.Title>Worker Photo</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {selectedPhoto ? (
            <img
              src={selectedPhoto}
              alt="Worker"
              style={{ width: '100%', maxHeight: '400px', objectFit: 'contain' }}
              onError={() => setError('Failed to load photo')}
            />
          ) : (
            <p>No photo available.</p>
          )}
        </Modal.Body>
      </Modal>
    </div>
  );
};

export default CompanyAdminDashboard;

/* File: C:\Users\coop\Desktop\company_management\client\src\components\Login.js */
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

const Login = () => {
  const [credentials, setCredentials] = useState({ username: '', password: '' });
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      console.log('Attempting login with:', credentials);
      const response = await axios.post(
        'http://localhost:3001/api/auth/login',
        credentials,
        { withCredentials: true }
      );
      console.log('Login response:', response.data);

      const { user } = response.data;
      const role = user.role;

      localStorage.setItem('role', role);

      if (role === 'super_admin') {
        console.log('Redirecting to super admin dashboard');
        navigate('/super-admin');
      } else if (role === 'company_admin') {
        console.log('Redirecting to company admin dashboard');
        navigate('/company-admin');
      } else if (role === 'worker_manager') {
        console.log('Redirecting to worker manager dashboard');
        navigate('/worker-manager');
      } else {
        console.log('Unknown role:', role);
        setError('Unknown role. Please contact the administrator.');
      }
    } catch (err) {
      console.error('Login error:', err.response?.data || err);
      setError(err.response?.data?.error || 'Invalid credentials');
    }
  };

  return (
    <div className="container mt-4">
      <div className="dashboard-header">
        <h2 className="dashboard-title">Login</h2>
      </div>
      {error && <div className="alert alert-danger">{error}</div>}
      <form onSubmit={handleLogin} className="worker-creation-form">
        <div className="form-group">
          <label htmlFor="username" className="form-label">Username</label>
          <input
            type="text"
            className="form-control"
            id="username"
            value={credentials.username}
            onChange={(e) => setCredentials({ ...credentials, username: e.target.value })}
            placeholder="Enter username"
            required
          />
        </div>
        <div className="form-group">
          <label htmlFor="password" className="form-label">Password</label>
          <input
            type="password"
            className="form-control"
            id="password"
            value={credentials.password}
            onChange={(e) => setCredentials({ ...credentials, password: e.target.value })}
            placeholder="Enter password"
            required
          />
        </div>
        <button type="submit" className="btn btn-primary btn-create">Login</button>
      </form>
    </div>
  );
};

export default Login;

/* File: C:\Users\coop\Desktop\company_management\client\src\components\Navbar.js */
import { useState, useEffect } from 'react';
import { Navbar as BootstrapNavbar, Nav, Button } from 'react-bootstrap';
import { Link, useLocation, useNavigate } from 'react-router-dom';

const Navbar = () => {
  const [token, setToken] = useState(localStorage.getItem('token')); // Track token in state
  const location = useLocation(); // Detect route changes
  const navigate = useNavigate();

  // Update token state when route changes or on mount
  useEffect(() => {
    setToken(localStorage.getItem('token'));
  }, [location]); // Re-run when location changes

  const handleLogout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('role');
    setToken(null); // Update state to force re-render
    navigate('/login');
  };

  return (
    <BootstrapNavbar bg="dark" variant="dark" expand="lg">
      <BootstrapNavbar.Brand as={Link} to="/">Labor Management</BootstrapNavbar.Brand>
      <BootstrapNavbar.Toggle aria-controls="basic-navbar-nav" />
      <BootstrapNavbar.Collapse id="basic-navbar-nav">
        <Nav className="ms-auto">
          {!token ? (
            <Nav.Link as={Link} to="/login">Login</Nav.Link>
          ) : (
            <>
              {localStorage.getItem('role') === 'super_admin' && (
                <Nav.Link as={Link} to="/super-admin">Super Admin Dashboard</Nav.Link>
              )}
              {localStorage.getItem('role') === 'company_admin' && (
                <Nav.Link as={Link} to="/company-admin">Company Admin Dashboard</Nav.Link>
              )}
              {localStorage.getItem('role') === 'worker_manager' && (
                <Nav.Link as={Link} to="/worker-manager">Worker Manager Dashboard</Nav.Link>
              )}
              <Button variant="outline-light" onClick={handleLogout}>Logout</Button>
            </>
          )}
        </Nav>
      </BootstrapNavbar.Collapse>
    </BootstrapNavbar>
  );
};

export default Navbar;

/* File: C:\Users\coop\Desktop\company_management\client\src\components\PaymentMethods.js */
import React, { useState, useEffect } from 'react';
import { Table, Button, Modal, Form, Alert } from 'react-bootstrap';
import axios from 'axios';

const PaymentMethods = () => {
    const [paymentMethods, setPaymentMethods] = useState([]);
    const [showAddModal, setShowAddModal] = useState(false);
    const [newMethodName, setNewMethodName] = useState('');
    const [error, setError] = useState('');
    const [success, setSuccess] = useState('');

    useEffect(() => {
        fetchPaymentMethods();
    }, []);

    const fetchPaymentMethods = async () => {
        try {
            const token = localStorage.getItem('token');
            console.log('Using token:', token);

            const response = await axios.get('http://localhost:3001/api/payment-methods', {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });
            
            console.log('Payment methods response:', response.data);
            setPaymentMethods(response.data);
        } catch (err) {
            console.error('Full error:', err);
            console.error('Error response:', err.response?.data);
            setError(err.response?.data?.error || 'Failed to fetch payment methods');
        }
    };

    const handleAddMethod = async () => {
        try {
            const token = localStorage.getItem('token');
            await axios.post('http://localhost:3001/api/payment-methods', 
                { name: newMethodName },
                {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                }
            );
            setShowAddModal(false);
            setNewMethodName('');
            fetchPaymentMethods();
        } catch (err) {
            console.error('Error adding payment method:', err);
            setError(err.response?.data?.error || 'Failed to add payment method');
        }
    };

    const handleDelete = async (id) => {
        if (window.confirm('Are you sure you want to delete this payment method?')) {
            try {
                const token = localStorage.getItem('token');
                await axios.delete(`http://localhost:3001/api/payment-methods/${id}`, {
                    headers: { Authorization: `Bearer ${token}` }
                });
                setSuccess('Payment method deleted successfully');
                fetchPaymentMethods();
            } catch (err) {
                setError('Failed to delete payment method');
                console.error('Error:', err);
            }
        }
    };

    return (
        <div>
            {error && <Alert variant="danger" onClose={() => setError('')} dismissible>{error}</Alert>}
            {success && <Alert variant="success" onClose={() => setSuccess('')} dismissible>{success}</Alert>}

            <div className="mb-3">
                <Button variant="primary" onClick={() => setShowAddModal(true)}>
                    Add New Payment Method
                </Button>
            </div>

            <Table striped bordered hover>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Bank Name</th>
                        <th>Created At</th>
                        <th>Created By</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {paymentMethods.map(method => (
                        <tr key={method.id}>
                            <td>{method.id}</td>
                            <td>{method.name}</td>
                            <td>{new Date(method.created_at).toLocaleDateString()}</td>
                            <td>{method.created_by}</td>
                            <td>
                                <Button 
                                    variant="danger" 
                                    size="sm"
                                    onClick={() => handleDelete(method.id)}
                                >
                                    Delete
                                </Button>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </Table>

            <Modal show={showAddModal} onHide={() => setShowAddModal(false)}>
                <Modal.Header closeButton>
                    <Modal.Title>Add New Payment Method</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    <Form.Group>
                        <Form.Label>Bank Name</Form.Label>
                        <Form.Control
                            type="text"
                            value={newMethodName}
                            onChange={(e) => setNewMethodName(e.target.value)}
                            placeholder="Enter bank name"
                        />
                    </Form.Group>
                </Modal.Body>
                <Modal.Footer>
                    <Button variant="secondary" onClick={() => setShowAddModal(false)}>
                        Cancel
                    </Button>
                    <Button variant="primary" onClick={handleAddMethod}>
                        Add Method
                    </Button>
                </Modal.Footer>
            </Modal>
        </div>
    );
};

export default PaymentMethods; 

/* File: C:\Users\coop\Desktop\company_management\client\src\components\SuperAdminDashboard.js */
import { useState, useEffect } from 'react';
import { Table, Button, Form, Modal, Badge, Alert, Nav } from 'react-bootstrap';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';

const SuperAdminDashboard = () => {
  const [companies, setCompanies] = useState([]);
  const [admins, setAdmins] = useState([]);
  const [showCompanyModal, setShowCompanyModal] = useState(false);
  const [showAdminModal, setShowAdminModal] = useState(false);
  const [newCompany, setNewCompany] = useState({ name: '', adminUsername: '', adminPassword: '' });
  const [newAdmin, setNewAdmin] = useState({ username: '', password: '', company_id: '' });
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [currentView, setCurrentView] = useState('home');
  const [isLoggedIn, setIsLoggedIn] = useState(!!localStorage.getItem('role')); // Check login state
  const navigate = useNavigate();

  useEffect(() => {
    if (!isLoggedIn) navigate('/login');
    if (currentView === 'home') fetchCompanies();
    if (currentView === 'admins') fetchAdmins();
  }, [currentView, isLoggedIn, navigate]);

  useEffect(() => {
    if (success) {
      const timer = setTimeout(() => setSuccess(''), 3000);
      return () => clearTimeout(timer);
    }
  }, [success]);

  const fetchCompanies = async () => {
    try {
      const response = await axios.get('http://localhost:3001/api/companies', { withCredentials: true });
      setCompanies(response.data);
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to fetch companies');
    }
  };

  const fetchAdmins = async () => {
    try {
      const response = await axios.get('http://localhost:3001/api/admin/company-admins', { withCredentials: true });
      setAdmins(response.data);
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to fetch company admins');
    }
  };

  const handleCreateCompany = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:3001/api/companies', newCompany, { withCredentials: true });
      setShowCompanyModal(false);
      setNewCompany({ name: '', adminUsername: '', adminPassword: '' });
      fetchCompanies();
      setSuccess('Company and admin created successfully');
    } catch (err) {
      console.error('Create company error:', err.response?.data || err);
      setError(err.response?.data?.message || err.message || 'Failed to create company');
    }
  };

  const handleCreateAdmin = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:3001/api/admin/company-admins', newAdmin, { withCredentials: true });
      setShowAdminModal(false);
      setNewAdmin({ username: '', password: '', company_id: '' });
      fetchAdmins();
      setSuccess('Company Admin created successfully');
    } catch (err) {
      console.error('Create admin error:', err.response?.data || err);
      setError(err.response?.data?.message || err.message || 'Failed to create admin');
    }
  };

  const handleStatusToggle = async (companyId, currentStatus) => {
    try {
      await axios.patch(
        `http://localhost:3001/api/companies/${companyId}/status`,
        { status: currentStatus === 'active' ? 'inactive' : 'active' },
        { withCredentials: true }
      );
      fetchCompanies();
      setSuccess(`Company ${currentStatus === 'active' ? 'deactivated' : 'activated'} successfully`);
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to update company status');
    }
  };

  const handleAdminStatusToggle = async (adminId, currentStatus) => {
    try {
      const newStatus = currentStatus === 'active' ? 'inactive' : 'active';
      await axios.patch(
        `http://localhost:3001/api/admin/company-admins/${adminId}/status`,
        { status: newStatus },
        { withCredentials: true }
      );
      fetchAdmins();
      setSuccess(`Admin ${newStatus} successfully`);
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to update admin status');
    }
  };

  const handleDeleteCompany = async (companyId) => {
    if (window.confirm('Are you sure you want to delete this company?')) {
      try {
        await axios.delete(`http://localhost:3001/api/companies/${companyId}`, { withCredentials: true });
        fetchCompanies();
        setSuccess('Company deleted successfully');
      } catch (err) {
        console.error('Error deleting company:', err.message || err);
        setError(err.response?.data?.message || 'Failed to delete company');
      }
    }
  };

  const handleLogout = async () => {
    try {
      await axios.post('http://localhost:3001/api/auth/logout', {}, { withCredentials: true });
      localStorage.clear();
      setIsLoggedIn(false);
      navigate('/login');
    } catch (err) {
      console.error('Logout error:', err);
      localStorage.clear();
      setIsLoggedIn(false);
      navigate('/login');
    }
  };

  const renderHeader = () => {
    return (
      <div className="dashboard-header">
        <h2 className="dashboard-title">
          {currentView === 'home' ? 'Super Admin Dashboard' : 'Manage Company Admins'}
        </h2>
        <div className="d-flex flex-md-row flex-column">
          {currentView !== 'home' && (
            <Button variant="secondary" className="me-md-2 mb-2 mb-md-0" onClick={() => setCurrentView('home')}>
              Back to Dashboard
            </Button>
          )}
          {currentView === 'home' && (
            <>
              <Button variant="primary" onClick={() => setShowCompanyModal(true)} className="me-md-2 mb-2 mb-md-0">
                Create New Company
              </Button>
              {isLoggedIn && (
                <Button variant="secondary" onClick={handleLogout}>
                  Logout
                </Button>
              )}
            </>
          )}
          {currentView === 'admins' && (
            <Button variant="primary" onClick={() => setShowAdminModal(true)}>
              Add Company Admin
            </Button>
          )}
        </div>
      </div>
    );
  };

  if (!isLoggedIn) return null; // Prevent rendering if not logged in

  return (
    <div className="container mt-4">
      {error && <Alert variant="danger">{error}</Alert>}
      {success && <Alert variant="success">{success}</Alert>}

      {renderHeader()}

      <Nav variant="tabs" className="mb-3">
        <Nav.Item>
          <Nav.Link eventKey="home" active={currentView === 'home'} onClick={() => setCurrentView('home')}>
            Companies
          </Nav.Link>
        </Nav.Item>
        <Nav.Item>
          <Nav.Link eventKey="admins" active={currentView === 'admins'} onClick={() => setCurrentView('admins')}>
            Company Admins
          </Nav.Link>
        </Nav.Item>
      </Nav>

      {currentView === 'home' && (
        <div className="table-responsive">
          <Table striped bordered hover className="company-table">
            <thead>
              <tr>
                <th>ID</th>
                <th>Company Name</th>
                <th>Status</th>
                <th>Created At</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {companies.map((company) => (
                <tr key={company.id}>
                  <td>{company.id}</td>
                  <td>{company.name}</td>
                  <td>
                    <Badge className={company.status === 'active' ? 'status-active' : 'status-inactive'}>
                      {company.status}
                    </Badge>
                  </td>
                  <td>{new Date(company.created_at).toLocaleDateString()}</td>
                  <td>
                    {company.id === 1 ? (
                      <Button variant="warning" disabled title="Super Admin Company cannot be deactivated">
                        Deactivate
                      </Button>
                    ) : (
                      <Button
                        variant={company.status === 'active' ? 'warning' : 'success'}
                        onClick={() => handleStatusToggle(company.id, company.status)}
                        className="btn-action"
                      >
                        {company.status === 'active' ? 'Deactivate' : 'Activate'}
                      </Button>
                    )}
                    {company.id !== 1 && (
                      <Button
                        variant="danger"
                        className="btn-action ms-md-2"
                        onClick={() => handleDeleteCompany(company.id)}
                      >
                        Delete
                      </Button>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>
        </div>
      )}

      {currentView === 'admins' && (
        <div className="table-responsive">
          <Table striped bordered hover className="company-table">
            <thead>
              <tr>
                <th>ID</th>
                <th>Username</th>
                <th>Company ID</th>
                <th>Status</th>
                <th>Created At</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {admins.map((admin) => (
                <tr key={admin.id}>
                  <td>{admin.id}</td>
                  <td>{admin.username}</td>
                  <td>{admin.company_id}</td>
                  <td>
                    <Badge className={admin.status === 'active' ? 'status-active' : 'status-inactive'}>
                      {admin.status}
                    </Badge>
                  </td>
                  <td>{new Date(admin.created_at).toLocaleDateString()}</td>
                  <td>
                    <Button
                      variant={admin.status === 'active' ? 'warning' : 'success'}
                      onClick={() => handleAdminStatusToggle(admin.id, admin.status)}
                      className="btn-action"
                    >
                      {admin.status === 'active' ? 'Deactivate' : 'Activate'}
                    </Button>
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>
        </div>
      )}

      <Modal show={showCompanyModal} onHide={() => setShowCompanyModal(false)} dialogClassName="modal-form">
        <Modal.Header closeButton>
          <Modal.Title>Create New Company</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form onSubmit={handleCreateCompany}>
            <Form.Group className="form-group">
              <Form.Label className="form-label">Company Name</Form.Label>
              <Form.Control
                type="text"
                value={newCompany.name}
                onChange={(e) => setNewCompany({ ...newCompany, name: e.target.value })}
                required
                className="form-control"
              />
            </Form.Group>
            <Form.Group className="form-group">
              <Form.Label className="form-label">Admin Username</Form.Label>
              <Form.Control
                type="text"
                value={newCompany.adminUsername}
                onChange={(e) => setNewCompany({ ...newCompany, adminUsername: e.target.value })}
                required
                className="form-control"
              />
            </Form.Group>
            <Form.Group className="form-group">
              <Form.Label className="form-label">Admin Password</Form.Label>
              <Form.Control
                type="password"
                value={newCompany.adminPassword}
                onChange={(e) => setNewCompany({ ...newCompany, adminPassword: e.target.value })}
                required
                className="form-control"
              />
            </Form.Group>
            <Button variant="primary" type="submit" className="btn-create">Create Company</Button>
          </Form>
        </Modal.Body>
      </Modal>

      <Modal show={showAdminModal} onHide={() => setShowAdminModal(false)} dialogClassName="modal-form">
        <Modal.Header closeButton>
          <Modal.Title>Add Company Admin</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form onSubmit={handleCreateAdmin}>
            <Form.Group className="form-group">
              <Form.Label className="form-label">Username</Form.Label>
              <Form.Control
                type="text"
                value={newAdmin.username}
                onChange={(e) => setNewAdmin({ ...newAdmin, username: e.target.value })}
                required
                className="form-control"
              />
            </Form.Group>
            <Form.Group className="form-group">
              <Form.Label className="form-label">Password</Form.Label>
              <Form.Control
                type="password"
                value={newAdmin.password}
                onChange={(e) => setNewAdmin({ ...newAdmin, password: e.target.value })}
                required
                className="form-control"
              />
            </Form.Group>
            <Form.Group className="form-group">
              <Form.Label className="form-label">Company</Form.Label>
              <Form.Select
                value={newAdmin.company_id}
                onChange={(e) => setNewAdmin({ ...newAdmin, company_id: e.target.value })}
                required
                className="form-control"
              >
                <option value="">Select Company</option>
                {companies.map((company) => (
                  <option key={company.id} value={company.id}>{company.name}</option>
                ))}
              </Form.Select>
            </Form.Group>
            <Button variant="primary" type="submit" className="btn-create">Create Admin</Button>
          </Form>
        </Modal.Body>
      </Modal>
    </div>
  );
};

export default SuperAdminDashboard;

/* File: C:\Users\coop\Desktop\company_management\client\src\components\WorkerManagerDashboard.js */
import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import * as XLSX from 'xlsx';
import { Nav, Tab, Table, Button, Modal, Form, Badge, Alert } from 'react-bootstrap';

const WorkerManagerDashboard = () => {
  const [activeTab, setActiveTab] = useState('workers');
  const [workers, setWorkers] = useState([]);
  const [filteredWorkers, setFilteredWorkers] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [payrollSearchQuery, setPayrollSearchQuery] = useState('');
  const [filteredPayrollData, setFilteredPayrollData] = useState([]);
  const [showWorkerModal, setShowWorkerModal] = useState(false);
  const [newWorker, setNewWorker] = useState({ name: '', photo: null, bankName: '', accountNumber: '', regdate: '' });
  const [photoPreview, setPhotoPreview] = useState(null);
  const [payrollRules, setPayrollRules] = useState({ standard_working_hours: 8, daily_rate: 0, overtime_rate: 0 });
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [myRequests, setMyRequests] = useState([]);
  const [showOvertimeModal, setShowOvertimeModal] = useState(false);
  const [overtimeData, setOvertimeData] = useState({ workerId: '', hours: '', allWorkers: false, deduct: false });
  const [showPhotoModal, setShowPhotoModal] = useState(false);
  const [selectedPhoto, setSelectedPhoto] = useState(null);
  const [payrollData, setPayrollData] = useState([]);
  const [payrollPeriod, setPayrollPeriod] = useState({ startDate: '', endDate: '' });
  const [isLoggedIn, setIsLoggedIn] = useState(!!localStorage.getItem('role')); // Check login state
  const navigate = useNavigate();

  // Use useCallback to memoize fetchPayroll
  const fetchPayroll = useCallback(async () => {
    try {
      const response = await axios.get('http://localhost:3001/api/workers/payroll', {
        withCredentials: true,
        params: { startDate: payrollPeriod.startDate, endDate: payrollPeriod.endDate },
      });
      setPayrollData(response.data);
      setFilteredPayrollData(response.data);
    } catch (err) {
      setError('Failed to fetch payroll data');
    }
  }, [payrollPeriod.startDate, payrollPeriod.endDate]);

  useEffect(() => {
    if (!isLoggedIn) navigate('/login');
    if (success) {
      const timer = setTimeout(() => setSuccess(''), 3000);
      return () => clearTimeout(timer);
    }
  }, [success, isLoggedIn, navigate]);

  useEffect(() => {
    if (searchQuery.trim() === '') {
      setFilteredWorkers(workers);
    } else {
      const filtered = workers.filter((worker) =>
        worker.name.toLowerCase().includes(searchQuery.toLowerCase())
      );
      setFilteredWorkers(filtered);
    }
  }, [searchQuery, workers]);

  useEffect(() => {
    if (payrollSearchQuery.trim() === '') {
      setFilteredPayrollData(payrollData);
    } else {
      const filtered = payrollData.filter((entry) =>
        entry.name.toLowerCase().includes(payrollSearchQuery.toLowerCase())
      );
      setFilteredPayrollData(filtered);
    }
  }, [payrollSearchQuery, payrollData]);

  useEffect(() => {
    if (isLoggedIn) {
      fetchWorkers();
      fetchPayrollRules();
      fetchPendingRequests();
      if (payrollPeriod.startDate && payrollPeriod.endDate) fetchPayroll();
    }
  }, [payrollPeriod, isLoggedIn, fetchPayroll]); // Include fetchPayroll in the dependency array

  const fetchWorkers = async () => {
    try {
      const response = await axios.get('http://localhost:3001/api/workers', { withCredentials: true });
      setWorkers(response.data);
      setFilteredWorkers(response.data);
    } catch (err) {
      console.error('Error fetching workers:', err);
      setError('Failed to fetch workers');
    }
  };

  const fetchPayrollRules = async () => {
    try {
      const response = await axios.get('http://localhost:3001/api/payroll-rules', { withCredentials: true });
      setPayrollRules({
        standard_working_hours: 8,
        daily_rate: parseFloat(response.data.daily_rate) || 0,
        overtime_rate: parseFloat(response.data.overtime_rate) || 0,
      });
    } catch (err) {
      console.error('Error fetching payroll rules:', err);
      setError('Failed to fetch payroll rules');
    }
  };

  const fetchPendingRequests = async () => {
    try {
      const response = await axios.get('http://localhost:3001/api/pending-requests/my', { withCredentials: true });
      setMyRequests(response.data);
    } catch (err) {
      console.error('Error fetching pending requests:', err);
      setError('Failed to fetch pending requests');
    }
  };

  const handleToggleWorkerStatus = async (workerId, currentStatus) => {
    try {
      const newStatus = currentStatus === 'active' ? 'inactive' : 'active';
      await axios.put(`http://localhost:3001/api/workers/${workerId}/status`, { status: newStatus }, { withCredentials: true });
      fetchWorkers(); // Refresh the worker list
      setSuccess(`Worker status updated to ${newStatus}`);
    } catch (err) {
      setError('Failed to update worker status');
    }
  };

  const handleDeleteWorker = async (workerId) => {
    try {
      await axios.delete(`http://localhost:3001/api/workers/${workerId}`, { withCredentials: true });
      fetchWorkers(); // Refresh the worker list
      setSuccess('Worker deleted successfully');
    } catch (err) {
      setError('Failed to delete worker');
    }
  };

  const exportWorkersToExcel = () => {
    if (!payrollRules) {
      alert('Payroll rules not loaded yet.');
      return;
    }
    const data = filteredWorkers.map((worker) => ({
      ID: worker.id,
      Name: worker.name,
      'Daily Rate': payrollRules.daily_rate.toFixed(2),
      'Overtime Rate': payrollRules.overtime_rate.toFixed(2),
      'Overtime Hours': worker.overtime_hours || 0,
      Status: worker.status,
      'Bank Name': worker.bankName || 'N/A',
      'Account Number': worker.accountNumber || 'N/A',
    }));
    const ws = XLSX.utils.json_to_sheet(data);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Workers');
    XLSX.writeFile(wb, 'Worker_Payroll_Data.xlsx');
  };

  const exportPayrollToExcel = () => {
    const data = filteredPayrollData.map((entry) => ({
      ID: entry.workerId,
      Name: entry.name,
      'Days Worked': entry.daysWorked,
      'Regular Hours': entry.regularHours,
      'Overtime Hours': entry.overtimeHours,
      'Daily Pay (Br)': entry.dailyPay.toFixed(2),
      'Overtime Pay (Br)': entry.overtimePay.toFixed(2),
      'Total Salary (Br)': entry.totalSalary.toFixed(2),
      'Bank Name': entry.bankName || 'N/A',
      'Account Number': entry.accountNumber || 'N/A',
    }));
    const ws = XLSX.utils.json_to_sheet(data);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, 'Payroll');
    XLSX.writeFile(wb, `Payroll_${payrollPeriod.startDate}_to_${payrollPeriod.endDate}.xlsx`);
  };

  const handleLogout = async () => {
    try {
      await axios.post('http://localhost:3001/api/auth/logout', {}, { withCredentials: true });
      localStorage.clear();
      setIsLoggedIn(false);
      navigate('/login');
    } catch (err) {
      console.error('Logout error:', err);
      localStorage.clear();
      setIsLoggedIn(false);
      navigate('/login');
    }
  };

  const handleCreateWorkerRequest = async (e) => {
    e.preventDefault();
    try {
        const formData = new FormData();
        formData.append('type', 'new_worker');
        formData.append('details', JSON.stringify({
            name: newWorker.name,
            bankName: newWorker.bankName,
            accountNumber: newWorker.accountNumber,
        }));
        if (newWorker.photo) {
            formData.append('photo', newWorker.photo);
        }

        await axios.post('http://localhost:3001/api/pending-requests', formData, {
            withCredentials: true,
            headers: { 'Content-Type': 'multipart/form-data' },
        });

        setShowWorkerModal(false);
        setNewWorker({ name: '', photo: null, bankName: '', accountNumber: '' });
        setPhotoPreview(null);
        fetchPendingRequests();
        setSuccess('Worker registration request submitted');
    } catch (err) {
        setError(err.response?.data?.message || 'Failed to submit worker request');
    }
};

  const handleOvertimeRequest = async (e) => {
    e.preventDefault();
    try {
      const details = overtimeData.allWorkers
        ? { hours: parseFloat(overtimeData.hours), deduct: overtimeData.deduct }
        : { workerId: overtimeData.workerId, hours: parseFloat(overtimeData.hours), deduct: overtimeData.deduct };
      await axios.post('http://localhost:3001/api/pending-requests', {
        type: overtimeData.allWorkers ? 'overtime_group' : 'overtime_individual',
        details: JSON.stringify(details),
      }, { withCredentials: true });

      setShowOvertimeModal(false);
      setOvertimeData({ workerId: '', hours: '', allWorkers: false, deduct: false });
      fetchPendingRequests();
      setSuccess('Overtime request submitted');
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to submit overtime request');
    }
  };

  const handleViewPhoto = (photoUrl) => {
    if (!photoUrl) {
      setError('No photo available for this worker');
      return;
    }
    const fullUrl = photoUrl.startsWith('http') ? photoUrl : `http://localhost:3001${photoUrl}`;
    setSelectedPhoto(fullUrl);
    setShowPhotoModal(true);
  };

  if (!isLoggedIn) return null;

  return (
    <div className="container mt-4">
      <div className="d-flex justify-content-between align-items-center mb-3 flex-md-row flex-column">
        <h2>Worker Manager Dashboard</h2>
        {isLoggedIn && (
          <Button variant="secondary" onClick={handleLogout}>Logout</Button>
        )}
      </div>

      {error && <Alert variant="danger">{error}</Alert>}
      {success && <Alert variant="success">{success}</Alert>}

      <Tab.Container activeKey={activeTab} onSelect={(key) => setActiveTab(key)}>
        <Nav variant="tabs" defaultActiveKey="workers" className="mb-3">
          <Nav.Item><Nav.Link eventKey="workers">Workers</Nav.Link></Nav.Item>
          <Nav.Item><Nav.Link eventKey="pending-requests">Pending Requests</Nav.Link></Nav.Item>
          <Nav.Item><Nav.Link eventKey="payroll">Payroll Rules</Nav.Link></Nav.Item>
          <Nav.Item><Nav.Link eventKey="payroll-calc">Payroll Calculation</Nav.Link></Nav.Item>
        </Nav>

        <Tab.Content>
          <Tab.Pane eventKey="workers">
            <div className="d-flex justify-content-between align-items-center mb-3 flex-md-row flex-column">
              <h3>Manage Workers</h3>
              <div className="d-flex flex-md-row flex-column align-items-md-center">
                <Form.Control
                  type="text"
                  placeholder="Search workers by name..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="me-md-2 mb-2 mb-md-0"
                  style={{ width: '200px' }}
                />
                <Button variant="primary" onClick={() => setShowWorkerModal(true)} className="me-md-2 mb-2 mb-md-0">Add New Worker</Button>
                <Button variant="info" onClick={() => setShowOvertimeModal(true)} className="me-md-2 mb-2 mb-md-0">Request Overtime</Button>
                <Button variant="success" onClick={exportWorkersToExcel}>Export to Excel</Button>
              </div>
            </div>
            {filteredWorkers.length > 0 ? (
              <div className="table-responsive">
                <Table striped bordered hover>
                  <thead>
                    <tr>
                      <th>ID</th>
                      <th>Name</th>
                      <th>Bank Name</th>
                      <th>Account Number</th>
                      <th>Registration Date</th>
                      <th>Daily Rate</th>
                      <th>Overtime Rate</th>
                      <th>Overtime Hours</th>
                      <th>Status</th>
                      <th>Photo</th>
                      <th>Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredWorkers.map((worker) => (
                      <tr key={worker.id}>
                        <td>{worker.id}</td>
                        <td>{worker.name}</td>
                        <td>{worker.bankName || 'N/A'}</td>
                        <td>{worker.accountNumber || 'N/A'}</td>
                        <td>{new Date(worker.regDate).toLocaleDateString()}</td>
                        <td>{payrollRules.daily_rate.toFixed(2)} Br</td>
                        <td>{payrollRules.overtime_rate.toFixed(2)} Br</td>
                        <td>{worker.overtime_hours || 0}</td>
                        <td><Badge bg={worker.status === 'active' ? 'success' : 'danger'}>{worker.status}</Badge></td>
                        <td>
                          <Button
                            variant="info"
                            size="sm"
                            onClick={() => handleViewPhoto(worker.photo_url)}
                            disabled={!worker.photo_url || worker.photo_url === ''}
                          >
                            View Picture
                          </Button>
                        </td>
                        <td>
                          <Button
                            variant={worker.status === 'active' ? 'warning' : 'success'}
                            onClick={() => handleToggleWorkerStatus(worker.id, worker.status)}
                            className="btn-action"
                          >
                            {worker.status === 'active' ? 'Deactivate' : 'Activate'}
                          </Button>
                          <Button
                            variant="danger"
                            onClick={() => handleDeleteWorker(worker.id)}
                            className="btn-action ms-md-2"
                          >
                            Delete
                          </Button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </Table>
              </div>
            ) : (
              <p>No workers found.</p>
            )}
          </Tab.Pane>

          <Tab.Pane eventKey="pending-requests">
            <h3>My Pending Requests</h3>
            {myRequests.length > 0 ? (
              <div className="table-responsive">
                <Table striped bordered hover>
                  <thead>
                    <tr>
                      <th>Type</th>
                      <th>Details</th>
                      <th>Status</th>
                      <th>Date</th>
                    </tr>
                  </thead>
                  <tbody>
                    {myRequests.map((request) => (
                      <tr key={request.id}>
                        <td>{request.request_type}</td>
                        <td>
                          {request.request_type === 'new_worker' && <>Worker: {request.request_data.name}</>}
                          {request.request_type === 'overtime_individual' && (
                            <>Worker ID: {request.request_data.workerId}, Hours: {request.request_data.hours}{request.request_data.deduct ? ' (Deduct)' : ''}</>
                          )}
                          {request.request_type === 'overtime_group' && (
                            <>Hours: {request.request_data.hours} (All Workers){request.request_data.deduct ? ' (Deduct)' : ''}</>
                          )}
                        </td>
                        <td><Badge bg={request.status === 'pending' ? 'warning' : request.status === 'approved' ? 'success' : 'danger'}>{request.status}</Badge></td>
                        <td>{new Date(request.created_at).toLocaleDateString()}</td>
                      </tr>
                    ))}
                  </tbody>
                </Table>
              </div>
            ) : (
              <p>No pending requests found.</p>
            )}
          </Tab.Pane>

          <Tab.Pane eventKey="payroll">
            <h3>Payroll Rules</h3>
            {payrollRules ? (
              <div className="payroll-rules-card">
                <div className="card-header"><h5>Current Payroll Rules</h5></div>
                <div className="card-body">
                  <Table bordered>
                    <tbody>
                      <tr><th>Standard Working Hours/Day</th><td>{payrollRules.standard_working_hours} hours</td></tr>
                      <tr><th>Daily Rate</th><td>{payrollRules.daily_rate.toFixed(2)} Br</td></tr>
                      <tr><th>Overtime Rate (per hour)</th><td>{payrollRules.overtime_rate.toFixed(2)} Br</td></tr>
                    </tbody>
                  </Table>
                </div>
              </div>
            ) : (
              <p>Loading payroll rules...</p>
            )}
          </Tab.Pane>

          <Tab.Pane eventKey="payroll-calc">
            <h3>Payroll Calculation</h3>
            <Form className="mb-3">
              <Form.Group className="d-flex align-items-center flex-md-row flex-column">
                <Form.Label className="me-md-2 mb-2 mb-md-0">Start Date:</Form.Label>
                <Form.Control
                  type="date"
                  value={payrollPeriod.startDate}
                  onChange={(e) => setPayrollPeriod({ ...payrollPeriod, startDate: e.target.value })}
                  className="me-md-3 mb-2 mb-md-0"
                />
                <Form.Label className="me-md-2 mb-2 mb-md-0">End Date:</Form.Label>
                <Form.Control
                  type="date"
                  value={payrollPeriod.endDate}
                  onChange={(e) => setPayrollPeriod({ ...payrollPeriod, endDate: e.target.value })}
                />
              </Form.Group>
            </Form>
            <div className="d-flex justify-content-between align-items-center mb-3 flex-md-row flex-column">
              <Form.Control
                type="text"
                placeholder="Search payroll by name..."
                value={payrollSearchQuery}
                onChange={(e) => setPayrollSearchQuery(e.target.value)}
                style={{ width: '200px' }}
                className="mb-2 mb-md-0"
              />
              <Button
                variant="success"
                onClick={exportPayrollToExcel}
                disabled={filteredPayrollData.length === 0}
              >
                Export to Excel
              </Button>
            </div>
            {payrollData.length > 0 ? (
              <div className="table-responsive">
                <Table striped bordered hover>
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Bank Name</th>
                    <th>Account Number</th>
                    <th>Registration Date</th>
                    <th>Daily Rate</th>
                    <th>Overtime Rate</th>
                    <th>Overtime Hours</th>
                    <th>Status</th>
                    <th>Photo</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredWorkers.map((worker) => (
                    <tr key={worker.id}>
                      <td>{worker.id}</td>
                      <td>{worker.name}</td>
                      <td>{worker.bankname || 'N/A'}</td> {/* Add bankname */}
                      <td>{worker.accountnumber || 'N/A'}</td> {/* Add accountnumber */}
                      <td>{worker.regdate ? new Date(worker.regdate).toLocaleDateString() : 'N/A'}</td> {/* Add regdate */}
                      <td>{payrollRules.daily_rate.toFixed(2)} Br</td>
                      <td>{payrollRules.overtime_rate.toFixed(2)} Br</td>
                      <td>{worker.overtime_hours || 0}</td>
                      <td>
                        <Badge className={worker.status === 'active' ? 'status-active' : 'status-inactive'}>
                          {worker.status}
                        </Badge>
                      </td>
                      <td>
                        <Button
                          variant="info"
                          size="sm"
                          onClick={() => handleViewPhoto(worker.photo_url)}
                          disabled={!worker.photo_url}
                        >
                          View Photo
                        </Button>
                      </td>
                      <td>
                        <Button
                          variant={worker.status === 'active' ? 'warning' : 'success'}
                          onClick={() => handleToggleWorkerStatus(worker.id, worker.status)}
                          className="btn-action"
                        >
                          {worker.status === 'active' ? 'Deactivate' : 'Activate'}
                        </Button>
                        <Button
                          variant="danger"
                          onClick={() => handleDeleteWorker(worker.id)}
                          className="btn-action ms-md-2"
                        >
                          Delete
                        </Button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </Table>
              </div>
            ) : (
              <p>Select a date range to calculate payroll.</p>
            )}
          </Tab.Pane>
        </Tab.Content>
      </Tab.Container>

      <Modal show={showWorkerModal} onHide={() => setShowWorkerModal(false)}>
      <Modal.Header closeButton><Modal.Title>Add New Worker</Modal.Title></Modal.Header>
      <Modal.Body>
          <Form onSubmit={handleCreateWorkerRequest}>
              <Form.Group className="mb-3">
                  <Form.Label>Photo</Form.Label>
                  <div className="mb-2">
                      {photoPreview && <img src={photoPreview} alt="Preview" style={{ width: '100px', height: '100px', objectFit: 'cover' }} />}
                  </div>
                  <Form.Control
                      type="file"
                      accept="image/*"
                      onChange={(e) => {
                          const file = e.target.files[0];
                          setNewWorker({ ...newWorker, photo: file });
                          setPhotoPreview(URL.createObjectURL(file));
                      }}
                  />
              </Form.Group>
              <Form.Group className="mb-3">
                  <Form.Label>Name</Form.Label>
                  <Form.Control
                      type="text"
                      value={newWorker.name}
                      onChange={(e) => setNewWorker({ ...newWorker, name: e.target.value })}
                      required
                  />
              </Form.Group>
              <Form.Group className="mb-3">
                  <Form.Label>Bank Name</Form.Label>
                  <Form.Control
                      type="text"
                      value={newWorker.bankName}
                      onChange={(e) => setNewWorker({ ...newWorker, bankName: e.target.value })}
                      required
                  />
              </Form.Group>
              <Form.Group className="mb-3">
                  <Form.Label>Account Number</Form.Label>
                  <Form.Control
                      type="text"
                      value={newWorker.accountNumber}
                      onChange={(e) => setNewWorker({ ...newWorker, accountNumber: e.target.value })}
                      required
                  />
              </Form.Group>
              <Button type="submit" variant="primary">Submit Request</Button>
          </Form>
      </Modal.Body>
  </Modal>

      <Modal show={showOvertimeModal} onHide={() => setShowOvertimeModal(false)}>
        <Modal.Header closeButton><Modal.Title>Request Overtime</Modal.Title></Modal.Header>
        <Modal.Body>
          <Form onSubmit={handleOvertimeRequest}>
            <Form.Group className="mb-3">
              <Form.Check
                type="checkbox"
                label="Apply to all workers"
                checked={overtimeData.allWorkers}
                onChange={(e) => setOvertimeData({ ...overtimeData, allWorkers: e.target.checked })}
              />
            </Form.Group>
            {!overtimeData.allWorkers && (
              <Form.Group className="mb-3">
                <Form.Label>Worker</Form.Label>
                <Form.Select
                  value={overtimeData.workerId}
                  onChange={(e) => setOvertimeData({ ...overtimeData, workerId: e.target.value })}
                  required
                >
                  <option value="">Select worker</option>
                  {workers.map(worker => (
                    <option key={worker.id} value={worker.id}>{worker.name}</option>
                  ))}
                </Form.Select>
              </Form.Group>
            )}
            <Form.Group className="mb-3">
              <Form.Label>Hours</Form.Label>
              <Form.Control
                type="number"
                step="0.5"
                value={overtimeData.hours}
                onChange={(e) => setOvertimeData({ ...overtimeData, hours: e.target.value })}
                required
              />
            </Form.Group>
            <Form.Group className="mb-3">
              <Form.Check
                type="checkbox"
                label="Deduct Overtime"
                checked={overtimeData.deduct}
                onChange={(e) => setOvertimeData({ ...overtimeData, deduct: e.target.checked })}
              />
            </Form.Group>
            <Button type="submit" variant="primary">
              {overtimeData.deduct ? 'Request Overtime Deduction' : 'Request Overtime Addition'}
            </Button>
          </Form>
        </Modal.Body>
      </Modal>

      <Modal show={showPhotoModal} onHide={() => setShowPhotoModal(false)}>
        <Modal.Header closeButton><Modal.Title>Worker Photo</Modal.Title></Modal.Header>
        <Modal.Body>
          {selectedPhoto ? (
            <img 
              src={selectedPhoto} 
              style={{ width: '100%', maxHeight: '400px', objectFit: 'contain' }} 
              alt="Worker" 
              onError={() => setError('Failed to load photo')}
            />
          ) : (
            <p>No photo available.</p>
          )}
        </Modal.Body>
      </Modal>
    </div>
  );
};

export default WorkerManagerDashboard;

/* File: C:\Users\coop\Desktop\company_management\client\src\index.css */
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}


/* File: C:\Users\coop\Desktop\company_management\client\src\index.js */
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


/* File: C:\Users\coop\Desktop\company_management\client\src\pages\Home.js */
const Home = () => {
    return (
        <div className="container mt-5">
            <h1>Welcome to Labor Management System</h1>
            <p>Please login to access the dashboard.</p>
        </div>
    );
};

export default Home;

/* File: C:\Users\coop\Desktop\company_management\client\src\reportWebVitals.js */
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


/* File: C:\Users\coop\Desktop\company_management\client\src\setupTests.js */
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

